import numpy as np
import matplotlib.pyplot as plt
from scipy.special import iv
from scipy.integrate import quad
from numpy.polynomial.polynomial import Polynomial

# Constants
Z_AIR = 376.730  # Ohm, impedance of free space

def convert_epsilon_to_Z(epsilon):
    return Z_AIR / np.sqrt(epsilon)

def convert_n_to_Z(n):
    return Z_AIR / n

def convert_Z_to_alpha(Z, epsilon_2, epsilon_1=1.0):
    return np.sqrt(((Z_AIR / Z)**2) * (1 / (epsilon_2 - epsilon_1)) - (epsilon_1 / (epsilon_2 - epsilon_1)))

def phi(x, A):
    def integrand(y, A):
        return iv(1, A * (1 - y**2) ** 0.5) / (A * (1 - y**2) ** 0.5)
    result, _ = quad(integrand, 0, x, args=(A,))
    return result

phi = np.vectorize(phi)

def n_z_orig(z, ni, ns, gamma_m):
    A = np.arccosh((1 / (2 * gamma_m)) * np.log(ns / ni))
    return np.sqrt(ni * ns) * np.exp(gamma_m * A**2 * phi(2 * z - 1.0, A))

n_z = np.vectorize(n_z_orig)

def Z_Klopfenstein_Grann(x, gamma_m, epsilon_2, epsilon_1=1.0, length=1.0):
    return convert_n_to_Z(n_z(x/length, np.sqrt(epsilon_1), np.sqrt(epsilon_2), gamma_m))

def generate_profile_points(epsilon_absorber, thickness, height, base_thickness, N, gamma_m):
    y_values = np.linspace(0, height, num=N)
    impedance_profile = Z_Klopfenstein_Grann(y_values, gamma_m, epsilon_absorber, epsilon_1=1.0, length=height)
    filling_factors = convert_Z_to_alpha(impedance_profile, epsilon_absorber)

    

    #points = [(0.0, 0.0), (0.5 * thickness, 0.0), (0.5 * thickness, base_thickness)]
    points = []
    for i in range(1, N):
        points.append((filling_factors[N-i] * thickness * 0.5, y_values[i] + base_thickness))
        #points.append((-filling_factors[i] * thickness * 0.5, y_values[N - i] + base_thickness))
    #points.append((-0.5 * thickness, base_thickness))
    #points.append((-0.5 * thickness, 0.0))
    #points.append((0.0, 0.0))
    return y_values, impedance_profile, filling_factors, points

def save_to_txt_file(points, filename="profile_points_klop.txt"):
    with open(filename, "w") as file:
        for x, y in points:
            file.write(f"{x:.2f}\t{y:.2f}\t{3.00}\n")

def curve_fit(filename, deg=1):
    data = np.loadtxt(filename)
    x, y = data[:, 0], data[:, 1]
    coefficients = np.polyfit(x, y, deg)
    polynomial = Polynomial(coefficients)
    return x, y, polynomial

def plot_all(y_values, impedance_profile, filling_factors, points, x, y, polynomial):
    plt.figure(figsize=(18, 6))

    plt.subplot(1, 3, 1)
    plt.plot(y_values, impedance_profile, label='Impedance Profile')
    plt.title('Impedance vs. Height')
    plt.xlabel('Height (mm)')
    plt.ylabel('Impedance (Ohms)')
    plt.grid(True)
    plt.legend()

    plt.subplot(1, 3, 2)
    plt.plot(y_values, filling_factors, label='Filling Factor', color='red')
    plt.title('Filling Factor vs. Height')
    plt.xlabel('Height (mm)')
    plt.ylabel('Filling Factor')
    plt.grid(True)
    plt.legend()

    plt.subplot(1, 3, 3)
    x_vals, y_vals = zip(*points)
    plt.plot(x_vals, y_vals, 'o-', label='Profile Shape')
    plt.title('Profile Shape')
    plt.xlabel('Width (mm)')
    plt.ylabel('Height (mm)')
    plt.grid(True)
    plt.legend()

    plt.tight_layout()
    plt.show()

    plt.figure()
    xp = np.linspace(min(x), max(x), 100)
    plt.plot(x, y, 'o', label='Original Data')
    plt.plot(xp, polynomial(xp), '-', label='Fitted Curve')
    plt.title('Polynomial Fit to Data Points')
    plt.xlabel('X values')
    plt.ylabel('Y values')
    plt.legend()
    plt.show()

if __name__ == "__main__":
    epsilon_absorber = 5.131
    thickness = 6.0
    height = 9.0
    base_thickness = 7.0
    N = 36
    gamma_m = 0.035

    y_values, impedance_profile, filling_factors, points = generate_profile_points(epsilon_absorber, thickness, height, base_thickness, N, gamma_m)
    save_to_txt_file(points)
    x, y, polynomial = curve_fit("profile_points.txt")
    plot_all(y_values, impedance_profile, filling_factors, points, x, y, polynomial)
